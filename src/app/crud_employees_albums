import {
  getFirestore,
  doc,
  collection,
  query,
  where,
  or,
  getDocs,
  setDoc,
  updateDoc,
  deleteDoc,
  runTransaction,
  Transaction,
} from 'firebase/firestore';

const db = getFirestore();
const EMPLOYEES_COLLECTION = 'employees';
const ALBUMS_COLLECTION = 'albums';

export async function getEmployeeById(
  transaction: Transaction,
  id: string | number
) {
  try {
    const q = query(
      collection(db, EMPLOYEES_COLLECTION),
      or(where('campminderId', '==', id), where('uid', '==', id))
    );
    const snap = await getDocs(q);
    if (snap.empty) throw new Error(`No employee found with uid or campminderId "${id}"`);
    return snap.docs[0].data();
  } catch (e) {
    const errorMessage = e instanceof Error ? e.message : String(e);
    if (e instanceof Error && e.message.includes('No employee found with uid')) {
      throw e;
    }
    throw new Error(`getEmployeeById failed: ${errorMessage}`);
  }
}

export async function getEmployeeByEmail(
  transaction: Transaction,
  email: string
) {
  try {
    const q = query(collection(db, EMPLOYEES_COLLECTION), where('email', '==', email));
    const snap = await getDocs(q);
    if (snap.empty) throw new Error(`No employee found with email "${email}"`);
    return snap.docs[0].data();
  } catch (e) {
    const errorMessage = e instanceof Error ? e.message : String(e);
    if (e instanceof Error && e.message.includes('No employee found with email')) {
      throw e;
    }
    throw new Error(`getEmployeeByEmail failed: ${errorMessage}`);
  }
}

export async function createEmployee(
  transaction: Transaction,
  employee: {
    campminderId?: number;
    email: string;
    uid?: string;
  }
) {
  try {
    const ref = doc(collection(db, EMPLOYEES_COLLECTION), employee.campminderId?.toString());
    transaction.set(ref, employee);
  } catch (e) {
    const errorMessage = e instanceof Error ? e.message : String(e);
    throw new Error(`createEmployee failed: ${errorMessage}`);
  }
}

export async function updateEmployee(
  transaction: Transaction,
  id: string | number,
  updates: Partial<{ campminderId?: number; email: string; uid?: string }>
) {
  try {
    const ref = doc(db, EMPLOYEES_COLLECTION, id.toString());
    transaction.update(ref, updates);
  } catch (e) {
    const errorMessage = e instanceof Error ? e.message : String(e);
    throw new Error(`updateEmployee failed: ${errorMessage}`);
  }
}

export async function deleteEmployee(
  transaction: Transaction,
  id: string | number
) {
  try {
    const ref = doc(db, EMPLOYEES_COLLECTION, id.toString());
    transaction.delete(ref);
  } catch (e) {
    const errorMessage = e instanceof Error ? e.message : String(e);
    throw new Error(`deleteEmployee failed: ${errorMessage}`);
  }
}

export async function getAlbumById(
  transaction: Transaction,
  id: string
) {
  try {
    const ref = doc(db, ALBUMS_COLLECTION, id);
    const snap = await transaction.get(ref);
    if (!snap.exists()) throw new Error(`No album found with id "${id}"`);
    return { id: snap.id, ...snap.data() };
  } catch (e) {
    const errorMessage = e instanceof Error ? e.message : String(e);
    if (e instanceof Error && e.message.includes('No album found with id')) {
      throw e;
    }
    throw new Error(`getAlbumById failed: ${errorMessage}`);
  }
}

export async function createAlbum(
  transaction: Transaction,
  album: { title: string }
) {
  try {
    const ref = doc(collection(db, ALBUMS_COLLECTION));
    transaction.set(ref, { ...album, id: ref.id });
  } catch (e) {
    const errorMessage = e instanceof Error ? e.message : String(e);
    throw new Error(`createAlbum failed: ${errorMessage}`);
  }
}

export async function updateAlbum(
  transaction: Transaction,
  id: string,
  updates: Partial<{ title: string }>
) {
  try {
    const ref = doc(db, ALBUMS_COLLECTION, id);
    transaction.update(ref, updates);
  } catch (e) {
    const errorMessage = e instanceof Error ? e.message : String(e);
    throw new Error(`updateAlbum failed: ${errorMessage}`);
  }
}

export async function deleteAlbum(
  transaction: Transaction,
  id: string
) {
  try {
    const ref = doc(db, ALBUMS_COLLECTION, id);
    transaction.delete(ref);
  } catch (e) {
    const errorMessage = e instanceof Error ? e.message : String(e);
    throw new Error(`deleteAlbum failed: ${errorMessage}`);
  }
}
