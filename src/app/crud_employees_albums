import { Firestore, Transaction } from '@google-cloud/firestore';

export interface Employee {
  uid?: string;
  campminderId?: number;
  email: string;
}

export interface Album {
  id: string;
  title: string;
}

const EMPLOYEES_COLLECTION = 'employees';
const ALBUMS_COLLECTION = 'albums';

export async function getEmployeeById(
  transaction: Transaction,
  db: Firestore,
  id: string | number
): Promise<Employee> {
  try {
    const ref = db.collection(EMPLOYEES_COLLECTION);
    if (typeof id === 'string') {
      const doc = ref.doc(id);
      const snap = await transaction.get(doc);
      if (!snap.exists) throw new Error(`No employee found with uid "${id}"`);
      return snap.data() as Employee;
    } else {
      const snap = await transaction.get(ref.where('campminderId', '==', id));
      if (snap.empty) throw new Error(`No employee found with campminderId ${id}`);
      return snap.docs[0].data() as Employee;
    }
  } catch (e) {
    throw new Error(`getEmployeeById failed: ${e}`);
  }
}

export async function getEmployeeByEmail(
  transaction: Transaction,
  db: Firestore,
  email: string
): Promise<Employee> {
  try {
    const ref = db.collection(EMPLOYEES_COLLECTION);
    const snap = await transaction.get(ref.where('email', '==', email));
    if (snap.empty) throw new Error(`No employee found with email "${email}"`);
    return snap.docs[0].data() as Employee;
  } catch (e) {
    throw new Error(`getEmployeeByEmail failed: ${e}`);
  }
}

export async function createEmployee(
  transaction: Transaction,
  db: Firestore,
  employee: Employee
): Promise<void> {
  try {
    const ref = db.collection(EMPLOYEES_COLLECTION);
    const doc = employee.uid ? ref.doc(employee.uid) : ref.doc();
    transaction.set(doc, employee);
  } catch (e) {
    throw new Error(`createEmployee failed: ${e}`);
  }
}

export async function updateEmployee(
  transaction: Transaction,
  db: Firestore,
  id: string | number,
  updates: Partial<Employee>
): Promise<void> {
  try {
    const ref = db.collection(EMPLOYEES_COLLECTION);
    if (typeof id === 'string') {
      const doc = ref.doc(id);
      const snap = await transaction.get(doc);
      if (!snap.exists) throw new Error(`No employee found with uid "${id}"`);
      transaction.update(doc, updates);
    } else {
      const snap = await transaction.get(ref.where('campminderId', '==', id));
      if (snap.empty) throw new Error(`No employee found with campminderId ${id}`);
      const doc = ref.doc(snap.docs[0].id);
      transaction.update(doc, updates);
    }
  } catch (e) {
    throw new Error(`updateEmployee failed: ${e}`);
  }
}

export async function deleteEmployee(
  transaction: Transaction,
  db: Firestore,
  id: string | number
): Promise<void> {
  try {
    const ref = db.collection(EMPLOYEES_COLLECTION);
    if (typeof id === 'string') {
      const doc = ref.doc(id);
      const snap = await transaction.get(doc);
      if (!snap.exists) throw new Error(`No employee found with uid "${id}"`);
      transaction.delete(doc);
    } else {
      const snap = await transaction.get(ref.where('campminderId', '==', id));
      if (snap.empty) throw new Error(`No employee found with campminderId ${id}`);
      const doc = ref.doc(snap.docs[0].id);
      transaction.delete(doc);
    }
  } catch (e) {
    throw new Error(`deleteEmployee failed: ${e}`);
  }
}

export async function getAlbumById(
  transaction: Transaction,
  db: Firestore,
  id: string
): Promise<Album> {
  try {
    const doc = db.collection(ALBUMS_COLLECTION).doc(id);
    const snap = await transaction.get(doc);
    if (!snap.exists) throw new Error(`No album found with id "${id}"`);
    return snap.data() as Album;
  } catch (e) {
    throw new Error(`getAlbumById failed: ${e}`);
  }
}

export async function createAlbum(
  transaction: Transaction,
  db: Firestore,
  album: Album
): Promise<void> {
  try {
    const doc = db.collection(ALBUMS_COLLECTION).doc(album.id);
    transaction.set(doc, album);
  } catch (e) {
    throw new Error(`createAlbum failed: ${e}`);
  }
}

export async function updateAlbum(
  transaction: Transaction,
  db: Firestore,
  id: string,
  updates: Partial<Album>
): Promise<void> {
  try {
    const doc = db.collection(ALBUMS_COLLECTION).doc(id);
    const snap = await transaction.get(doc);
    if (!snap.exists) throw new Error(`No album found with id "${id}"`);
    transaction.update(doc, updates);
  } catch (e) {
    throw new Error(`updateAlbum failed: ${e}`);
  }
}

export async function deleteAlbum(
  transaction: Transaction,
  db: Firestore,
  id: string
): Promise<void> {
  try {
    const doc = db.collection(ALBUMS_COLLECTION).doc(id);
    const snap = await transaction.get(doc);
    if (!snap.exists) throw new Error(`No album found with id "${id}"`);
    transaction.delete(doc);
  } catch (e) {
    throw new Error(`deleteAlbum failed: ${e}`);
  }
}
